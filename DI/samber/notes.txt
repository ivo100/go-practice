go get -u github.com/samber/do/v2

https://pkg.go.dev/github.com/samber/do/v2

https://github.com/samber/do/blob/v2.0.0-beta.7/examples/simple/example.go

Service aliasing

You have probably already heard the Go proverb "Accept interfaces, return structs". The basic idea is to let the consumer define the interfaces it uses while the producer returns concrete types.

This library offers a great API for assembling a large number of modules with loose coupling and a nice separation of concern.

Aliases must be Go interfaces. It can be declared explicitly on injection using do.As(), or invoked implicitly using do.InvokeAs().

Implicit alias invocation:
provide struct, invoke interface
do.InvokeAs()
Explicit alias injection:
provide struct, bind interface, invoke interface
do.As()
Implicit invocation (preferred)

2 methods are available for implicit invocation:

do.InvokeAs
do.MustInvokeAs



// Injector is a DI container.
type Injector interface {
	// api
	ID() string
	Name() string
	Scope(string, ...func(Injector)) *Scope
	RootScope() *RootScope
	Ancestors() []*Scope
	Children() []*Scope
	ChildByID(string) (*Scope, bool)
	ChildByName(string) (*Scope, bool)
	ListProvidedServices() []EdgeService
	ListInvokedServices() []EdgeService
	HealthCheck() map[string]error
	HealthCheckWithContext(context.Context) map[string]error
	Shutdown() *ShutdownErrors
	ShutdownWithContext(context.Context) *ShutdownErrors
	clone(*RootScope, *Scope) *Scope

	// service lifecycle
	serviceExist(string) bool
	serviceExistRec(string) bool
	serviceGet(string) (any, bool)
	serviceGetRec(string) (any, *Scope, bool)
	serviceSet(string, any)
	serviceForEach(func(string, *Scope, any) bool)
	serviceForEachRec(func(string, *Scope, any) bool)
	serviceHealthCheck(context.Context, string) error
	serviceShutdown(context.Context, string) error
	onServiceInvoke(string)
}
