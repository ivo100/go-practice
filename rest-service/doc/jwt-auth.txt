
To handle JWT authentication in your REST service, you can follow these steps:

Install the jwt-go package: go get github.com/dgrijalva/jwt-go
Create a middleware function to check the JWT token. This middleware function should parse the token, verify the signature, and check the expiration time.

import (
    "net/http"
    "github.com/dgrijalva/jwt-go"
)

func AuthMiddleware(next http.HandlerFunc) http.HandlerFunc {
    return func(w http.ResponseWriter, r *http.Request) {
        // Get the JWT token from the Authorization header
        tokenString := r.Header.Get("Authorization")
        if tokenString == "" {
            http.Error(w, "Unauthorized", http.StatusUnauthorized)
            return
        }

        // Parse the JWT token
        token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
            // Check the signing algorithm
            if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
                return nil, fmt.Errorf("unexpected signing method: %v", token.Header["alg"])
            }

            // Return the secret key
            return []byte("my-secret-key"), nil
        })
        if err != nil {
            http.Error(w, err.Error(), http.StatusUnauthorized)
            return
        }

        // Check if the token is valid
        if !token.Valid {
            http.Error(w, "Unauthorized", http.StatusUnauthorized)
            return
        }

        // Call the next handler
        next(w, r)
    }
}

This middleware function checks if the Authorization header is present and contains a valid JWT token. If the token is valid, it calls the next handler in the chain.
Add the middleware function to your routes. You can add the middleware function to specific routes that require authentication.

router := gin.Default()

// Add the middleware function to the protected routes
router.GET("/protected", AuthMiddleware(func(c *gin.Context) {
    c.JSON(http.StatusOK, gin.H{"message": "You are authorized"})
}))


func LoginHandler(c *gin.Context) {
    // Get the username and password from the request
    username := c.PostForm("username")
    password := c.PostForm("password")

    // Check if the username and password are valid
    if !checkCredentials(username, password) {
        c.JSON(http.StatusUnauthorized, gin.H{"error": "Invalid credentials"})
        return
    }

    // Generate a JWT token
    token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
        "username": username,
        "exp":      time.Now().Add(time.Hour * 24).Unix(), // Expires in 24 hours
    })
    tokenString, err := token.SignedString([]byte("my-secret-key"))
    if err != nil {
        c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to generate token"})
        return
    }

    // Return the token to the client
    c.JSON(http.StatusOK, gin.H{"token": tokenString})
}


This code generates a JWT token with the username claim and an expiration time of 24 hours. The token is signed with a secret key.
Send the JWT token in the Authorization header. You can send the JWT token in the Authorization header of every request that requires authentication.

req, err := http.NewRequest("GET", "http://localhost

====

unit testing
===


import (
    "net/http"
    "net/http/httptest"
    "testing"
    "github.com/gin-gonic/gin"
    "github.com/stretchr/testify/assert"
    "github.com/dgrijalva/jwt-go"
)

func TestAuthMiddleware(t *testing.T) {
    // Create a test router with the middleware function and a mock handler
    router := gin.New()
    router.Use(AuthMiddleware)
    router.GET("/test", func(c *gin.Context) {
        c.JSON(http.StatusOK, gin.H{})
    })

    // Create a mock request with a JWT token
    token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
        "username": "test",
        "exp":      time.Now().Add(time.Hour).Unix(), // Expires in 1 hour
    })
    tokenString, _ := token.SignedString([]byte("my-secret-key"))
    req := httptest.NewRequest("GET", "/test", nil)
    req.Header.Set("Authorization", "Bearer "+tokenString)

    // Call the test request and check the response
    w := httptest.NewRecorder()
    router.ServeHTTP(w, req)
    assert.Equal(t, http.StatusOK, w.Code)
}


