
/*

 how write a Gin Gonic authentication middleware in Golang?

  how to manipulate request headers and context in Golang using middleware in gin framework?


To write a Gin Gonic authentication middleware in Golang, we can use the gin.Context object to extract the Authorization header from the incoming HTTP request and validate the token. If the token is valid, we can set the user data in the Gin context so that it can be used by the route handlers to make authorized updates.
Here's an example of a Gin Gonic authentication middleware in Golang:
*/

package middleware

import (
    "net/http"
    "strings"

    "github.com/gin-gonic/gin"
)

func AuthMiddleware() gin.HandlerFunc {
    return func(c *gin.Context) {
        authHeader := c.GetHeader("Authorization")
        if authHeader == "" {
            c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "Authorization header is missing"})
            return
        }

        tokenParts := strings.Split(authHeader, " ")
        if len(tokenParts) != 2 || strings.ToLower(tokenParts[0]) != "bearer" {
            c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "Invalid authorization token"})
            return
        }

        // validate the token here and extract the user data
        // if the token is valid, set the user data in the Gin context
        // so that it can be used by the route handlers
        // for example:
        // user, err := validateToken(tokenParts[1])
        // if err != nil {
        //     c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "Invalid authorization token"})
        //     return
        // }
        // c.Set("user", user)

        c.Next()
    }
}

// ...

package main

import (
    "github.com/gin-gonic/gin"
    "path/to/middleware"
)

func main() {
    r := gin.Default()

    // add the authentication middleware to the Gin engine
    r.Use(middleware.AuthMiddleware())

    // add the route handlers here
    // ...

    r.Run(":8080")
}

/*

func MyHandler(c *gin.Context) {
    tokenString := c.GetHeader("Authorization")
    claims := jwt.MapClaims{}
    token, err := jwt.ParseWithClaims(tokenString, claims, func(token *jwt.Token) (interface{}, error) {
        // validate the signing method and return the secret key
        if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
            return nil, fmt.Errorf("unexpected signing method: %v", token.Header["alg"])
        }
        return []byte("secret-key"), nil
    })
    if err != nil {
        // handle the error
    }

    if token.Valid {
        // extract the claims from the token
        // for example:
        // user := claims["user"].(string)
    }

    // handle the request
}
*/

func AddHeaderMiddleware(headerName, headerValue string) gin.HandlerFunc {
    return func(c *gin.Context) {
        c.Request.Header.Set(headerName, headerValue)
        c.Next()
    }
}

/*
This middleware function takes two arguments: headerName and headerValue. It then modifies the request headers by setting the headerName header to the headerValue value using the Set() method of the http.Header object. Finally, it calls the Next() method of the gin.Context object to pass the modified request on to the next middleware or route handler.
To use this middleware function in a Gin Gonic application, we can simply add it to the Gin engine using the Use() method:
*/

func main() {
    r := gin.Default()

    // add the middleware to add a custom header to the request
    r.Use(AddHeaderMiddleware("X-Custom-Header", "custom-value"))

    // add the route handlers here
    // ...

    r.Run(":8080")
}


func AddToContextMiddleware(key, value interface{}) gin.HandlerFunc {
    return func(c *gin.Context) {
        c.Set(key, value)
        c.Next()
    }
}

func main() {
    r := gin.Default()

    // add the middleware to add a value to the request context
    r.Use(AddToContextMiddleware("key", "value"))

    // add the route handlers here
    // ...

    r.Run(":8080")
}

/*
How to pass data between middleware and handlers in Golang using Gin framework
*/

type MyData struct {
    Field1 string
    Field2 int
}

func MyMiddleware() gin.HandlerFunc {
    return func(c *gin.Context) {
        // create an instance of the custom struct
        myData := MyData{
            Field1: "some value",
            Field2: 123,
        }

        // set the instance in the context
        c.Set("myData", myData)

        // call the next middleware or handler
        c.Next()
    }
}

func MyHandler(c *gin.Context) {
    // retrieve the instance from the context
    myData := c.MustGet("myData").(MyData)

    // use the instance in the handler
    fmt.Println(myData.Field1)
    fmt.Println(myData.Field2)
}

======
// We can use closures to pass data between middleware and handlers. Here's an example

func MyMiddleware(myData string) gin.HandlerFunc {
    return func(c *gin.Context) {
        // use the data in the middleware
        fmt.Println(myData)

        // call the next middleware or handler
        c.Next()
    }
}

func MyHandler(c *gin.Context) {
    // handler code here
}

func main() {
    r := gin.Default()

    // add the middleware to the Gin engine
    r.Use(MyMiddleware("some value"))

    // add the handler to the Gin engine
    r.GET("/my-route", MyHandler)

    r.Run(":8080")
}

/*
In this example, the middleware function MyMiddleware() takes a string argument and returns a closure that uses the argument in the middleware. The handler function MyHandler() does not use the argument, but it is passed to the middleware when it is added to the Gin engine using the Use() method.
*/
