
/*

https://github.com/swaggo/gin-swagger

Sure, you can generate Swagger documentation for your Gin REST API using the swaggo/gin-swagger package. Here's an example of how you can modify the code to include Swagger documentation:

First, you need to add Swagger annotations to your UserService struct and its methods. Here's an example:


In RESTful architecture, the most commonly used terminology for the components that handle HTTP requests and responses are:

Handler: A handler is a function or method that handles a specific HTTP request. A handler is responsible for extracting data from the request, performing any necessary business logic, and returning an HTTP response.
Controller: A controller is a type of handler that is responsible for managing a set of related HTTP requests. A controller typically contains multiple methods, each of which corresponds to a different HTTP request.
Service: A service is a layer that contains the business logic of an application. Services are typically used by controllers to perform complex operations, such as interacting with a database or third-party API.


*/

// User represents a user in the system.
type User struct {
	ID        string `json:"id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

// UserRepository provides an interface for working with users.
type UserRepository interface {
	GetUser(id string) (User, error)
	AddUser(user User) error
}

// InMemoryUserRepository is an in-memory implementation of UserRepository.
type InMemoryUserRepository struct {
	users map[string]User
}

// GetUser returns the user with the given ID, or an error if the user is not found.
// @Summary Get a user by ID
// @Description Get a user by ID
// @Tags users
// @Param id query string true "ID of the user to get"
// @Success 200 {object} User
// @Failure 400 {string} string "Invalid request"
// @Failure 404 {string} string "User not found"
// @Failure 500 {string} string "Internal server error"
// @Router /users [get]
func (repo *InMemoryUserRepository) GetUser(id string) (User, error) {
	user, ok := repo.users[id]
	if !ok {
		return User{}, http.ErrNotFound
	}
	return user, nil
}

// AddUser adds a new user to the system.
// @Summary Add a user
// @Description Add a new user
// @Tags users
// @Accept json
// @Param user body User true "The user to add"
// @Success 201 {string} string "User created"
// @Failure 400 {string} string "Invalid request"
// @Failure 409 {string} string "User already exists"
// @Failure 500 {string} string "Internal server error"
// @Router /users [post]
func (repo *InMemoryUserRepository) AddUser(user User) error {
	_, ok := repo.users[user.ID]
	if ok {
		return http.ErrConflict
	}
	repo.users[user.ID] = user
	return nil
}

// UserService provides a REST API for working with users.
type UserService struct {
	repo UserRepository
}

// GetUser returns the user with the given ID, or an error if the user is not found.
func (service *UserService) GetUser(c *gin.Context) {
	id := c.Query("id")
	user, err := service.repo.GetUser(id)
	if err != nil {
		c.JSON(getStatusCode(err), gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, user)
}

// AddUser adds a new user to the system.
func (service *UserService) AddUser(c *gin.Context) {
	var user User
	if err := c.ShouldBindJSON(&user); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	if err := service.repo.AddUser(user); err != nil {
		c.JSON(getStatusCode(err), gin.H{"error": err.Error()})
		return
	}
	c.Status(http.StatusCreated)
}

/*
Next, you need to add Swagger documentation to your main function using the swag.Init function and the gin-swagger middleware. Here's an example:
*/

// @title User API
// @description This is a sample API for working with users.
// @version 1
// @host localhost:8080


=====

package main

import (
	"encoding/json"
	"log"
	"net/http"
)

type User struct {
	ID       int    `json:"id"`
	Username string `json:"username"`
	Email    string `json:"email"`
}

type UserRepository interface {
	GetUser(id int) (User, error)
	AddUser(user User) error
}

type InMemoryUserRepository struct {
	users map[int]User
}

func (repo *InMemoryUserRepository) GetUser(id int) (User, error) {
	user, ok := repo.users[id]
	if !ok {
		return User{}, http.ErrNotFound
	}
	return user, nil
}

func (repo *InMemoryUserRepository) AddUser(user User) error {
	if _, ok := repo.users[user.ID]; ok {
		return http.ErrConflict
	}
	repo.users[user.ID] = user
	return nil
}

type UserService struct {
	repo UserRepository
}

func (service *UserService) GetUser(w http.ResponseWriter, r *http.Request) {
	id := 1 // get id from URL or query string
	user, err := service.repo.GetUser(id)
	if err != nil {
		w.WriteHeader(http.StatusNotFound)
		return
	}
	json.NewEncoder(w).Encode(user)
}

func (service *UserService) AddUser(w http.ResponseWriter, r *http.Request) {
	var user User
	err := json.NewDecoder(r.Body).Decode(&user)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	err = service.repo.AddUser(user)
	if err != nil {
		w.WriteHeader(http.StatusConflict)
		return
	}
	w.WriteHeader(http.StatusCreated)
}

func main() {
	repo := &InMemoryUserRepository{users: make(map[int]User)}
	service := &UserService{repo: repo}

	http.HandleFunc("/users", service.GetUser).Methods("GET")
	http.HandleFunc("/users", service.AddUser).Methods("POST")

	log.Fatal(http.ListenAndServe(":8080", nil))
}


======

// unit testing

package main

import (
	"bytes"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
)

type MockUserRepository struct {
	users map[int]User
}

func (repo *MockUserRepository) GetUser(id int) (User, error) {
	user, ok := repo.users[id]
	if !ok {
		return User{}, http.ErrNotFound
	}
	return user, nil
}

func (repo *MockUserRepository) AddUser(user User) error {
	if _, ok := repo.users[user.ID]; ok {
		return http.ErrConflict
	}
	repo.users[user.ID] = user
	return nil
}

func TestGetUser(t *testing.T) {
	repo := &MockUserRepository{users: make(map[int]User)}
	user := User{ID: 1, Username: "testuser", Email: "testuser@example.com"}
	repo.users[user.ID] = user
	service := &UserService{repo: repo}

	// Create a test router using the Gin framework
	router := gin.Default()
	router.GET("/users", service.GetUser)

	// Create a test request
	req, _ := http.NewRequest("GET", "/users?id=1", nil)

	// Create a test response recorder
	w := httptest.NewRecorder()

	// Send the request to the test router
	router.ServeHTTP(w, req)

	// Check that the response code is correct
	assert.Equal(t, http.StatusOK, w.Code)

	// Decode the response body into a User object
	var actual User
	err := json.NewDecoder(w.Body).Decode(&actual)
	assert.NoError(t, err)

	// Check that the response body contains the expected user object
	assert.Equal(t, user, actual)
}

func TestAddUser(t *testing.T) {
	repo := &MockUserRepository{users: make(map[int]User)}
	service := &UserService{repo: repo}

	// Create a test router using the Gin framework
	router := gin.Default()
	router.POST("/users", service.AddUser)

	// Create a test user object
	user := User{ID: 1, Username: "testuser", Email: "testuser@example.com"}

	// Encode the user object as JSON
	userJson, err := json.Marshal(user)
	assert.NoError(t, err)

	// Create a test request with the JSON-encoded user object in the body
	req, _ := http.NewRequest("POST", "/users", bytes.NewBuffer(userJson))
	req.Header.Set("Content-Type", "application/json")

	// Create a test response recorder
	w := httptest.NewRecorder()

	// Send the request to the test router
	router.ServeHTTP(w, req)

	// Check that the response code is correct
	assert.Equal(t, http.StatusCreated, w.Code)

	// Check that the user object was added to the repository correctly
	assert.Equal(t, user, repo.users[user.ID])
}

====
